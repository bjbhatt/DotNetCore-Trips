// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Trips.Models;
using Trips.Persistence;

namespace Trips.Migrations
{
    [DbContext(typeof(TripsDbContext))]
    partial class TripsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trips.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveUntil");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("DivisionId");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("NIHSAC")
                        .HasMaxLength(255);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("BranchId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Branches","dbo");
                });

            modelBuilder.Entity("Trips.Models.Can", b =>
                {
                    b.Property<int>("CanId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveUntil");

                    b.Property<string>("CanNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("DivisionId");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("ProjectNumber")
                        .HasMaxLength(128);

                    b.Property<bool>("Reimbursable");

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("CanId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Cans","dbo");
                });

            modelBuilder.Entity("Trips.Models.CanAllocation", b =>
                {
                    b.Property<int>("CanAllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchId");

                    b.Property<int>("CanId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("DivisionId");

                    b.Property<int>("FiscalYear");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<decimal?>("POTSAmount");

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.Property<decimal?>("TravelAmount");

                    b.HasKey("CanAllocationId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CanId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("CanAllocations");
                });

            modelBuilder.Entity("Trips.Models.CanSubAllocation", b =>
                {
                    b.Property<int>("CanSubAllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CanAllocationId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("NEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal?>("POTSAmount");

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.Property<decimal?>("TravelAmount");

                    b.HasKey("CanSubAllocationId");

                    b.HasIndex("CanAllocationId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("NEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("CanSubAllocations","dbo");
                });

            modelBuilder.Entity("Trips.Models.Country", b =>
                {
                    b.Property<string>("ShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.HasKey("ShortName");

                    b.ToTable("Countries","dbo");
                });

            modelBuilder.Entity("Trips.Models.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("DefaultLodgeOffset");

                    b.Property<int>("DefaultMealFirstPercent");

                    b.Property<int>("DefaultMealLastPercent");

                    b.Property<int>("DefaultOtherRate");

                    b.Property<int>("DefaultTravelStartOffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("FiscalYearLock");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("NIHSAC");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("DivisionId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Divisions","dbo");
                });

            modelBuilder.Entity("Trips.Models.Institute", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("ShortName")
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("InstituteId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Institutes","dbo");
                });

            modelBuilder.Entity("Trips.Models.InvitationalTraveler", b =>
                {
                    b.Property<int>("InvitationalTravelerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("DivisionId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255);

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255);

                    b.Property<string>("OrganizationPhone")
                        .HasMaxLength(30);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("InvitationalTravelerId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("InvitationalTravelers","dbo");
                });

            modelBuilder.Entity("Trips.Models.Miscellaneous", b =>
                {
                    b.Property<int>("MiscellaneousId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("MiscellaneousId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Miscellaneous","dbo");
                });

            modelBuilder.Entity("Trips.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IncludeInSummary");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("PriorityId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Priority","dbo");
                });

            modelBuilder.Entity("Trips.Models.Role", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<bool>("BranchLevel");

                    b.Property<bool>("CanManageSelf");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("DivisionLevel");

                    b.Property<bool>("InstituteLevel");

                    b.Property<bool>("IsAdmin");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<int?>("ParentRoleId");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("ParentRoleId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("Roles","dbo");
                });

            modelBuilder.Entity("Trips.Models.State", b =>
                {
                    b.Property<string>("ShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.HasKey("ShortName");

                    b.ToTable("State","dbo");
                });

            modelBuilder.Entity("Trips.Models.TravelType", b =>
                {
                    b.Property<int>("TravelTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("TravelTypeId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("TravelType","dbo");
                });

            modelBuilder.Entity("Trips.Models.User", b =>
                {
                    b.Property<string>("NEDId")
                        .HasMaxLength(25);

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(255);

                    b.Property<string>("BranchShortName")
                        .HasMaxLength(25);

                    b.Property<string>("DivisionShortName")
                        .HasMaxLength(25);

                    b.Property<string>("EMail")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<string>("FullName")
                        .HasMaxLength(255);

                    b.Property<string>("FullNameLegal")
                        .HasMaxLength(255);

                    b.Property<string>("InstituteShortName")
                        .HasMaxLength(25);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<string>("LoginId")
                        .HasMaxLength(25);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128);

                    b.Property<string>("NIHSAC")
                        .HasMaxLength(25);

                    b.Property<string>("NIH_ORG_PATH")
                        .HasMaxLength(255);

                    b.Property<string>("PositionTitle")
                        .HasMaxLength(255);

                    b.Property<string>("SignatureName")
                        .HasMaxLength(255);

                    b.Property<int>("Status");

                    b.Property<string>("SupervisorNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(255);

                    b.HasKey("NEDId");

                    b.ToTable("Users","dbo");
                });

            modelBuilder.Entity("Trips.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserNEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("LastUpdateUserNEDId")
                        .HasMaxLength(25);

                    b.Property<string>("NEDId")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("RoleId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusUpdateDateTime");

                    b.Property<string>("StatusUpdateUserNEDId")
                        .IsRequired();

                    b.HasKey("UserRoleId");

                    b.HasIndex("CreateUserNEDId");

                    b.HasIndex("LastUpdateUserNEDId");

                    b.HasIndex("NEDId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusUpdateUserNEDId");

                    b.ToTable("UserRoles","dbo");
                });

            modelBuilder.Entity("Trips.Models.Branch", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Division", "Division")
                        .WithMany("Branches")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Can", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Division", "Division")
                        .WithMany("Cans")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.CanAllocation", b =>
                {
                    b.HasOne("Trips.Models.Branch", "Branch")
                        .WithMany("CanAllocations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Can", "Can")
                        .WithMany("CanAllocations")
                        .HasForeignKey("CanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Division", "Division")
                        .WithMany("CanAllocations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.CanSubAllocation", b =>
                {
                    b.HasOne("Trips.Models.CanAllocation", "CanAllocation")
                        .WithMany("CanSubAllocations")
                        .HasForeignKey("CanAllocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("NEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Division", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Institute", "Institute")
                        .WithMany("Divisions")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Institute", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.InvitationalTraveler", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Miscellaneous", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Priority", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.Role", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.TravelType", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Trips.Models.UserRole", b =>
                {
                    b.HasOne("Trips.Models.User", "CreateUserInfo")
                        .WithMany()
                        .HasForeignKey("CreateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "LastUpdateUserInfo")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("NEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Trips.Models.User", "StatusUpdateUser")
                        .WithMany()
                        .HasForeignKey("StatusUpdateUserNEDId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
